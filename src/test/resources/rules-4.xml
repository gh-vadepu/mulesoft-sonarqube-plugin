<rulestore type="mule4">
<!--Applicable in case of API if RAML is imported into Mulesoft application -->
	<ruleset category="application">
		<rule id="1"
			name="Application should have used APIKit to auto-generate the implementation interface"
			description="Application should have used APIKit to auto-generate the implementation interface"
			severity="MAJOR" applies="application" type="code_smell">
			count(//mule:mule/apikit:config)>0
		</rule>
<!--Default exceptions autogenerated in case RAML is imported into Mulesoft application -->
		<rule id="2"
			name="Application should have an APIKit Global exception strategy"
			description="Application should have an APIKit Global exception strategy"
			severity="MAJOR" applies="application" type="code_smell">
			starts-with(//mule:on-error-propagate/@type,'APIKIT')
		</rule>
	</ruleset>
<!-- Specifies the number of flows in the application. Count can be reduced further based on Organization standards -->
	<ruleset category="flows">
		<rule id="1"
			name="Configuration files should not have so many flows"
			description="Configuration files should not have so many flows"
			severity="MAJOR" type="code_smell">
			not(count(//mule:mule/mule:flow)>=10)
		</rule>
	</ruleset>
<!-- Specifies the number of flows in the application. Count can be increased further based on Organization standards and application -->
		<rule id="2"
			name="Configuration files should not have so many subflows"
			description="Configuration files should not have so many subflows"
			severity="MAJOR" type="code_smell">
			not(count(//mule:mule/mule:sub-flow)>=5)
		</rule>
<!-- Specifies stanadard naming convention of flow names in the application. Below regular expression need to be further standardized -->
		<rule id="3" name="Flows names should match a naming convention"
			description="Flows names should match a naming convention"
			severity="MINOR" type="code_smell">
			count(//mule:mule/mule:flow)=0 or
			matches(//mule:mule/mule:flow/@name, '^[a-z:\\{}]+(-[a-z]+)*$')
		</rule>
<!-- Specifies stanadard naming convention of sub flows in the application. Below regular expression need to be further standardized -->
		<rule id="4"
			name="SubFlows names should match a naming convention"
			description="SubFlows names should match a naming convention"
			severity="MINOR" type="code_smell">
			count(//mule:mule/mule:sub-flow)=0 or
			matches(//mule:mule/mule:sub-flow/@name, '^[a-z:\\{}]+(-[a-z]+)*$')
		</rule>
<!-- Mule key should be not be logged anywhere in the JSON Logger -->		
		<rule id="6" name="Encryption key should not be logged"
			description="Encryption key should not be logged" severity="MAJOR"
			type="vulnerability">
			count(//mule:mule/mule:flow/mule:json-logger:logger[contains(@message,'${mule.key}')])=0
			and
			count(//mule:mule/mule:sub-flow/mule:json-logger:logger[contains(@message,'${mule.key}')])=0
		</rule>
	</ruleset>
	<ruleset category="configuration">
<!-- Not Applicable -->	
		<rule id="1"
			name="Credentials and resources should be managed with application properties"
			description="Credentials and resources should be managed with application properties"
			severity="MAJOR" applies="application" type="bug">
			count(//mule:mule/secure-properties:config)>=1 or
			count(//mule:mule/mule:configuration-properties)>=1
		</rule>
<!-- Encryption Key should not be hardcoded in config properties -->	
		<rule id="2"
			name="Mule Credentials Vault should not use a hardcoded encryption key"
			description="Mule Credentials Vault should not use a hardcoded encryption key"
			severity="MAJOR" type="bug">
			count(//mule:mule/secure-properties:config)=0
			or
			matches(//mule:mule/secure-properties:config/@key, '^\$\{.*\}$')
		</rule>
<!-- Not Applicable as policies cant be applied in API manager with out autodiscovery in code -->	
		<rule id="3"
			name="AutoDiscovery should be used to register the app in API manager"
			description="AutoDiscovery should be used to register the app in API manager"
			severity="MAJOR" applies="application" type="vulnerability">
			count(//mule:mule/api-gateway:autodiscovery)=1
		</rule>
<!-- Not Applicable as status will be auto generated when the RAML is imported in the application -->	
		<rule id="4"
			name="HTTP Status codes should have been properly set inside the exception handler"
			description="HTTP Status codes should have been properly set inside the exception handler"
			severity="MAJOR" applies="application" type="bug">
			count(//mule:on-error-propagate[@type='APIKIT:BAD_REQUEST'])>0
			and
			count(//mule:on-error-propagate[@type='APIKIT:METHOD_NOT_ALLOWED'])>0
			and
			count(//mule:on-error-propagate[@type='APIKIT:NOT_FOUND'])>0
		</rule>
<!-- Not Applicable as there will be minor dataweave transformations as well-->
		<rule id="5"
			name="Data Transformations should be stored in external DWL Files - Payload"
			description="Data Transformations should be stored in external DWL Files - Payload"
			severity="MINOR" type="code_smell">
			count(//mule:mule/mule:flow/ee:transform/ee:message/ee:set-payload)=0
			or
			matches(//mule:mule/mule:flow/ee:transform/ee:message/ee:set-payload/@resource,'^.*dwl$')
		</rule>
<!-- No HTTP protocol should be present at Listener end -->
		<rule id="6" name="HTTP Listener should use HTTPS protocol"
			description="HTTP Listener should use HTTPS protocol"
			severity="MAJOR" type="vulnerability"
			locationHint="//*[local-name()='listener-config']">
			count(//mule:mule/http:listener-config)=0
			or
			//mule:mule/http:listener-config/http:listener-connection/@protocol='HTTPS'
		</rule>
<!-- HTTPS Port name property should be with specific key name in the Mulesoft application -->
		<rule id="7"
			name="HTTP Listener should use a specific port property"
			description="HTTP Listener should use a specific port property"
			severity="MAJOR" type="code_smell"
			locationHint="//*[local-name()='listener-config']">
			count(//mule:mule/http:listener-config)=0
			or
			//mule:mule/http:listener-config/http:listener-connection/@port='${https.port}'
			or
			//mule:mule/http:listener-config/http:listener-connection/@port='${https.private.port}'
		</rule>
<!-- API ID should not hardcoded as this will avoid the feasibility of changing at runtime -->
		<rule id="8"
			name="API ID in AutoDiscovery should not use a hardcoded value"
			description="API ID in AutoDiscovery should not use a hardcoded value"
			severity="MAJOR" type="code_smell">
			count(//mule:mule/api-gateway:autodiscovery)=0
			or
			matches(//mule:mule/api-gateway:autodiscovery/@apiId, '^\$\{.*\}$')
		</rule>
<!-- Any connection details should not be hardcoded in the Mulesoft application. Below mentioned example is for MSSQL. This need to be incorporated for all applicable connections being used -->
		<rule id="9"
			name="MSSQL - DB Host name should not use a hardcoded value"
			description="DB Host name should not use a 	&lt;b&gt;hardcoded value&lt;/b&gt;"
			severity="MAJOR" type="code_smell">
			count(//mule:mule/db:config/db:mssql-connection)=0
			or
			matches(//mule:mule/db:config/db:mssql-connection/@host,
			'^\$\{.*\}$')
		</rule>
<!-- Proper algorithm which is being used in the Mulesoft applications should be selected -->
		<rule id="10"
			name="Domain - Mule Secure Properties should use AES-CBC algorithm"
			description="&lt;b&gt;Domain&lt;/b&gt; - Mule Secure Properties should use AES-CBC algorithm"
			severity="MAJOR" applies="file" type="vulnerability">
			count(//domain:mule-domain/secure-properties:config/secure-properties:encrypt[@algorithm!='AES'
			or @mode!='CBC']) = 0
		</rule>
<!-- HTTPS Port value should not be hardcoded in the Mulesoft application -->
		<rule id="11"
			name="Domain - HTTP Listener should not use a hardcoded port value"
			description="&lt;b&gt;Domain&lt;/b&gt; - HTTP Listener should not use a hardcoded port value"
			severity="MAJOR" applies="file" type="code_smell">
			count(//domain:mule-domain/http:listener-config)=0
			or
			matches(//domain:mule-domain/http:listener-config/http:listener-connection/@port,
			'^\$\{.*\}$')
		</rule>
<!-- HTTPS listener connection should have TLS configured. Not applicable if going with dedicated load balancer -->
		<rule id="13"
			name="Domain - HTTPS Listener should have a TLS Configuration"
			description="&lt;b&gt;Domain&lt;/b&gt; - HTTPS Listener should have a TLS Configuration"
			severity="MAJOR" applies="file" type="vulnerability">
			count(//domain:mule-domain/http:listener-config/http:listener-connection[@protocol='HTTPS'
			and not(@tlsContext)])=0
		</rule>
<!-- All external connections should be configured with propert response and connection time out values. Below mentioned is example of HTTP response time out -->
		<rule id="14"
			name="Domain - HTTP Requestor Configuration should have a configurable Response Timeout"
			description="&lt;b&gt;Domain&lt;/b&gt; - HTTP Requestor Configuration should have a configurable Response Timeout"
			severity="CRITICAL" applies="file" type="bug">
			count(//domain:mule-domain/http:request-config[not(@responseTimeout)
			or not(matches(@responseTimeout,'^\$\{.*\}$'))]) = 0
		</rule>
	</ruleset>
</rulestore>